/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * WeatherStationDialog.java
 *
 * Created on Mar 14, 2010, 4:33:15 PM
 */

package ListDialog;

import Library.WeatherStation;
import Library.WeatherStationList;
import java.awt.Dimension;
import java.awt.Toolkit;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreePath;
import org.jdesktop.swingx.treetable.AbstractTreeTableModel;
import org.jdesktop.swingx.treetable.TreeTableModel;

/**
 *
 * @author Jazzy
 */
public class WeatherStationDialog extends javax.swing.JDialog {

    /** Creates new form WeatherStationDialog */

    private WeatherStation wsta;

    public WeatherStationDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        Toolkit tk = Toolkit.getDefaultToolkit();
        Dimension screenSize = tk.getScreenSize();
        int screenHeight = screenSize.height;
        int screenWidth = screenSize.width;
        Dimension winSize = getSize();
        setLocation((screenWidth - winSize.width) / 2 , (screenHeight - winSize.height) / 2);

        AddDataToTable();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jXTreeTable1 = new org.jdesktop.swingx.JXTreeTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jXTreeTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jXTreeTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jXTreeTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jXTreeTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jXTreeTable1MouseClicked
        if(evt.getClickCount() == 2)
        {
             TreePath selPath = jXTreeTable1.getPathForLocation(evt.getX(), evt.getY());
             wsta = (WeatherStation)((DefaultMutableTreeNode)selPath.getLastPathComponent()).getUserObject();
             dispose();
        }
    }//GEN-LAST:event_jXTreeTable1MouseClicked

    public WeatherStation GetSelected() {
        return wsta;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXTreeTable jXTreeTable1;
    // End of variables declaration//GEN-END:variables

    private void AddDataToTable() {
        DefaultMutableTreeNode root1 = getExampleFamily();
        TreeTableModel model = new MyTreeTableModel(root1);
        jXTreeTable1.setTreeTableModel(model);
    }

    private static class MyTreeTableModel extends AbstractTreeTableModel  {

        public MyTreeTableModel(Object root) {
            super(root);
        }

    /**
     * Error in AbstractTreeTableModel !!!
     * Without overriding this method you can't expand the tree!
     */
        @Override
        public Class getColumnClass(int column)
        {
          switch (column)
          {
          case 0:
            return TreeTableModel.class;
          default:
            return Object.class;
          }
        }

        public Object getChild(Object parent, int index)
        {
          assert parent instanceof MutableTreeNode;
          MutableTreeNode treenode = (MutableTreeNode) parent;
          return treenode.getChildAt(index);
        }

        public int getChildCount(Object parent)
        {
          assert parent instanceof MutableTreeNode;
          MutableTreeNode treenode = (MutableTreeNode) parent;
          return treenode.getChildCount();
        }

        public int getColumnCount()
        {
          return 2;
        }

            @Override
        public String getColumnName(int column)
        {
          switch (column)
          {
          case 0:
            return "WSTA";
          case 1:
            return "Station Name";

          default:
            return null;
          }

        }

        public Object getValueAt(Object node, int column)
        {
          assert node instanceof DefaultMutableTreeNode;
          DefaultMutableTreeNode treenode = (DefaultMutableTreeNode) node;
          //Person person = (Person) treenode.getUserObject();
          WeatherStation wsta = (WeatherStation) treenode.getUserObject();
          switch (column)
          {
              case 0: return wsta.Code;
              case 1: return wsta.StationName;

              default: return null;
          }

        }

            public int getIndexOfChild(Object parent, Object child) {
                return 0;
            }
      }

    private static DefaultMutableTreeNode getExampleFamily() {
        DefaultMutableTreeNode root = new DefaultMutableTreeNode(new WeatherStation());
        //DefaultMutableTreeNode child1 = null;
        WeatherStationList.GetAll().forEach(wsta ->
        {
            root.add(new DefaultMutableTreeNode(wsta));
        });
        return root;
      }
}


