/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CultivarListDialog.java
 *
 * Created on Mar 16, 2010, 10:02:02 PM
 */

package ListDialog;

import FileXModel.FileX;
import DSSATModel.Cultivar;
import DSSATModel.CultivarList;
import java.awt.Dimension;
import java.awt.Toolkit;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.MutableTreeNode;
import org.jdesktop.swingx.treetable.AbstractTreeTableModel;
import org.jdesktop.swingx.treetable.TreeTableModel;

/**
 *
 * @author Jazzy
 */
public class CultivarListDialog extends javax.swing.JDialog {

    /** Creates new form CultivarListDialog */

    private Cultivar cultivar;

    public CultivarListDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        Toolkit tk = Toolkit.getDefaultToolkit();
        Dimension screenSize = tk.getScreenSize();
        int screenHeight = screenSize.height;
        int screenWidth = screenSize.width;
        Dimension winSize = getSize();
        setLocation((screenWidth - winSize.width) / 2 , (screenHeight - winSize.height) / 2);

        AddDataToTable();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jXTable1 = new org.jdesktop.swingx.JXTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jXTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Crop Code", "Crop Name", "Cultivar Code", "Cultivar Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jXTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jXTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jXTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jXTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jXTable1MouseClicked
        if(evt.getClickCount() == 2) {
            cultivar = new Cultivar();

            TableModel tbModel = jXTable1.getModel();
            int viewRow = jXTable1.getSelectedRow();
            int row = -1;
            if (viewRow < 0) {
                row = viewRow;
            } else {
                row = jXTable1.convertRowIndexToModel(viewRow);
            }
            
            ListSelectionModel sel = jXTable1.getSelectionModel();

            cultivar.CropCode = (String) tbModel.getValueAt(row, 0);
            cultivar.CropName = (String) tbModel.getValueAt(row, 1);
            cultivar.CulCode = (String) tbModel.getValueAt(row, 2);
            cultivar.CulName = (String) tbModel.getValueAt(row, 3);

            dispose();
        }
    }//GEN-LAST:event_jXTable1MouseClicked

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    private org.jdesktop.swingx.JXTable jXTable1;
    // End of variables declaration//GEN-END:variables

    public Cultivar GetData() {
        return cultivar;
    }

    public void SetNull()
    {
        cultivar = null;
    }

    private void AddDataToTable() {
        DefaultTableModel tbModel = (DefaultTableModel) jXTable1.getModel();

        if (FileX.general.FileType != null && FileX.general.FileType.equalsIgnoreCase("Experimental"))  {
            jXTable1.removeColumn(jXTable1.getColumnModel().getColumn(2));
            jXTable1.removeColumn(jXTable1.getColumnModel().getColumn(1));
            jXTable1.removeColumn(jXTable1.getColumnModel().getColumn(0));

            CultivarList.GetAt(FileX.general.crop).forEach(cul -> {
                tbModel.addRow(new Object[]{cul.CropCode, cul.CropName, cul.CulCode, cul.CulName});
            });
        }
        else{
            //jXTable1.removeColumn(jXTable1.getColumnModel().getColumn(2));
            //jXTable1.removeColumn(jXTable1.getColumnModel().getColumn(1));
            //jXTable1.removeColumn(jXTable1.getColumnModel().getColumn(0));

            CultivarList.GetAll().forEach(cul -> {
                tbModel.addRow(new Object[]{cul.CropCode, cul.CropName, cul.CulCode, cul.CulName});
            });
        }
        
    }

    private static class MyTreeTableModel extends AbstractTreeTableModel  {

        public MyTreeTableModel(Object root) {
            super(root);
        }

    /**
     * Error in AbstractTreeTableModel !!!
     * Without overriding this method you can't expand the tree!
     */
        @Override
        public Class getColumnClass(int column) {
          switch (column)
          {
          case 0:
            return TreeTableModel.class;
          default:
            return Object.class;
          }
        }

        public Object getChild(Object parent, int index) {
          assert parent instanceof MutableTreeNode;
          MutableTreeNode treenode = (MutableTreeNode) parent;
          return treenode.getChildAt(index);
        }

        public int getChildCount(Object parent) {
          assert parent instanceof MutableTreeNode;
          MutableTreeNode treenode = (MutableTreeNode) parent;
          return treenode.getChildCount();
        }

        public int getColumnCount() {
          return FileX.general.FileType.equalsIgnoreCase("Experimental") ? 1 : 2;
        }

            @Override
        public String getColumnName(int column) {
            if (FileX.general.FileType.equalsIgnoreCase("Experimental")) {
                switch (column) {
                    case 0:
                        return "Cultivar";

                    default:
                        return null;
                }
            } else {
                switch (column) {
                    case 0:
                        return "Crop";
                    case 1:
                        return "Cultivar";

                    default:
                        return null;
                }
            }
        }

        public Object getValueAt(Object node, int column) {
            assert node instanceof DefaultMutableTreeNode;
            DefaultMutableTreeNode treenode = (DefaultMutableTreeNode) node;
            //Person person = (Person) treenode.getUserObject();
            Cultivar cul = (Cultivar) treenode.getUserObject();
            if (FileX.general.FileType.equalsIgnoreCase("Experimental")) {
                switch (column) {
                    case 0:
                        return cul.CulName;

                    default:
                        return null;
                }
            } else {
                switch (column) {
                    case 0:
                        return cul.CulCode;
                    case 1:
                        return cul.CulName;
                    default:
                        return null;
                }
            }

        }

            public int getIndexOfChild(Object parent, Object child) {
                return 0;
            }
      }

    private static DefaultMutableTreeNode getExampleFamily() {
        DefaultMutableTreeNode root = new DefaultMutableTreeNode(new Cultivar());
        if(FileX.general.FileType != null && FileX.general.FileType.equalsIgnoreCase("Experimental") 
                && FileX.general.crop != null && !FileX.general.crop.CropCode.equalsIgnoreCase("")){
            for (Cultivar cul : CultivarList.GetAt(FileX.general.crop)) {
                Cultivar c = new Cultivar();
                c.CropCode = cul.CropCode;
                c.CulCode = cul.CulCode;
                c.CulName = cul.CulName;
                DefaultMutableTreeNode child = new DefaultMutableTreeNode(c);
                root.add(child);
            }
        }
        else{
            DefaultMutableTreeNode child1 = null;
            String cropCode = ""; 
            for (Cultivar cul : CultivarList.GetAll()) {
                if (!cul.CropCode.equals(cropCode)) {
                    Cultivar c = new Cultivar();
                    c.CropCode = cul.CropCode;
                    c.CulCode = cul.CropCode;
                    c.CulName = cul.CropName;
                    child1 = new DefaultMutableTreeNode(c);
                    root.add(child1);
                    cropCode = cul.CropCode;
                }
                child1.add(new DefaultMutableTreeNode(cul));
            }
        }
        return root;
      }

}
