package xbuild;

import DSSATModel.FertilizerMethodList;
import DSSATModel.ResiduesList;
import FileXModel.FileX;
import FileXModel.IModelXBase;
import FileXModel.Organic;
import FileXModel.OrganicApplication;
import java.awt.EventQueue;
import java.awt.event.FocusListener;
import java.awt.event.WindowEvent;
import java.text.SimpleDateFormat;
import java.util.Locale;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import xbuild.Components.IXInternalFrame;
import xbuild.Events.UpdateLevelEvent;

/**
 *
 * @author Jazzy
 */
public class OrganicFrame extends IXInternalFrame {

    protected Organic organic;
    private int selectedRowIndex = -1;
    private Integer level;
    /**
     * Creates new form OrganicFrame
     */
    public OrganicFrame(String nodeName) {
        initComponents();
        
        level = 0;
        for(IModelXBase org : FileX.organicList.GetAll()){
            level++;
            if(getLevel(nodeName) == level){
                this.organic = (Organic)org;
                break;
            }
        }
        
        LoadOrganic();
        
        lblLevel.setText("Level " + level.toString());
        txtDescription.Init(organic, "RENAME", organic.RENAME);
        
        EventQueue.invokeLater(() -> {            
            setImage(imagePanel, setup.GetDSSATPath() + "\\Tools\\XBuild\\Residue2.jpg");
        });
    }
    
    /**
     *
     * @param name
     */
    @Override
    public void updatePanelName(String name){
        FocusListener[] listens = txtDescription.getListeners(FocusListener.class);
        for(FocusListener li : listens)
            txtDescription.removeFocusListener(li);
        
        level = 0;
        for (IModelXBase f : FileX.organicList.GetAll()) {
            level++;
            if(getLevel(name) == level){                
                lblLevel.setText("Level " + level.toString());
                txtDescription.setText(getDescription(name));
                break;
            }
        }
        
        for(FocusListener li : listens)
            this.addFocusListener(li);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtYear = new javax.swing.JTextField();
        jXLabel1 = new org.jdesktop.swingx.JXLabel();
        jXLabel2 = new org.jdesktop.swingx.JXLabel();
        rdDaysAfterPlanting = new javax.swing.JRadioButton();
        rdReportedDates = new javax.swing.JRadioButton();
        bnAddLayer = new javax.swing.JButton();
        bnDeleteLayer = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jXTable1 = new org.jdesktop.swingx.JXTable();
        lblLevel = new org.jdesktop.swingx.JXLabel();
        txtDescription = new xbuild.Components.XTextField();
        imagePanel = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jXLabel1.setText("Year");

        jXLabel2.setText("Management");

        rdDaysAfterPlanting.setSelected(true);
        rdDaysAfterPlanting.setText("Days After Planting");
        rdDaysAfterPlanting.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rdDaysAfterPlantingStateChanged(evt);
            }
        });

        rdReportedDates.setText("On Reported Dates");

        bnAddLayer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Plus.png"))); // NOI18N
        bnAddLayer.setText("Add Layer");
        bnAddLayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnAddLayerActionPerformed(evt);
            }
        });

        bnDeleteLayer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Minus.png"))); // NOI18N
        bnDeleteLayer.setText("Delete Layer");
        bnDeleteLayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnDeleteLayerActionPerformed(evt);
            }
        });

        jXTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Day", "<html><p align='center'>Residue<br>Material</p></html>", "<html><p align='center'>Amount<br>kg/ha</p></html>", "<html><p align='center'>Nitrogen<br>Concentration<br>%</p></html>", "<html><p align='center'>Phophorus<br>Concentration<br>%</p></html>", "<html><p align='center'>Potass.<br>Concentration<br>%</p></html>", "<html><p align='center'>Incorporation<br>%</p></html>", "<html><p align='center'>Incorporatin<br>Depth<br>cm</p></html>", "<html><p align='center'>Method of<br>Incorporatin<br>Code</p></html>"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jXTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jXTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jXTable1);

        lblLevel.setText("Level");
        lblLevel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        txtDescription.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDescriptionFocusLost(evt);
            }
        });

        imagePanel.setBackground(new java.awt.Color(153, 153, 153));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 655, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jXLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jXLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rdDaysAfterPlanting)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rdReportedDates))
                            .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(bnAddLayer)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(bnDeleteLayer))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 818, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(imagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jXLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rdDaysAfterPlanting)
                            .addComponent(rdReportedDates)
                            .addComponent(jXLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bnAddLayer)
                            .addComponent(bnDeleteLayer))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rdDaysAfterPlantingStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rdDaysAfterPlantingStateChanged
        if(rdDaysAfterPlanting.isSelected())
        {
            TableColumn col = jXTable1.getColumn(0);
            col.setHeaderValue("Day");
        }
        else
        {
            TableColumn col = jXTable1.getColumn(0);
            col.setHeaderValue("Date");
        }
        DefaultTableModel model = (DefaultTableModel)jXTable1.getModel();
        for(int i = 0;i < model.getRowCount();i++)
        model.setValueAt("", i, 0);
    }//GEN-LAST:event_rdDaysAfterPlantingStateChanged

    private void bnAddLayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnAddLayerActionPerformed
        OrganicApplication org = null;
        if (selectedRowIndex > 0 && selectedRowIndex < organic.GetSize()) {
            OrganicApplication tmp = organic.GetApp(selectedRowIndex);
            org = tmp.Clone();
        } else {
            org = new OrganicApplication();
        }

        final OrganicDialog organicDialog = new OrganicDialog(null, true, rdDaysAfterPlanting.isSelected(), org);
        organicDialog.show();

        organicDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                OrganicApplication organicApp = organicDialog.GetData();
                if(organicApp != null){
                    DefaultTableModel model = (DefaultTableModel) jXTable1.getModel();

                    model.addRow(SetRow(organicApp));

                    organic.AddApp(organicApp);
                }
                organicDialog.SetNull();
            }
        });
    }//GEN-LAST:event_bnAddLayerActionPerformed

    private void bnDeleteLayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnDeleteLayerActionPerformed
        int nRow = jXTable1.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) jXTable1.getModel();
        model.removeRow(nRow);

        organic.RemoveAt(nRow);
    }//GEN-LAST:event_bnDeleteLayerActionPerformed

    private void jXTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jXTable1MouseClicked
        if(evt.getClickCount() == 2)
        {
            final OrganicDialog organicDialog = new OrganicDialog(null, true, rdDaysAfterPlanting.isSelected(), organic.GetApp(jXTable1.getSelectedRow()));
            organicDialog.show();

            organicDialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosed(WindowEvent e) {
                    OrganicApplication organicApp = organicDialog.GetData();
                    if(organicApp != null){
                        DefaultTableModel model = (DefaultTableModel) jXTable1.getModel();
                        Vector vector = SetRow(organicApp);
                        for(int n = 0;n < vector.size();n++)
                        model.setValueAt(vector.get(n), jXTable1.getSelectedRow(), n);
                    }
                    organicDialog.SetNull();
                }
            });
        }
        else {
            int nRow = jXTable1.getSelectedRow();

            if(nRow != selectedRowIndex){
                selectedRowIndex = nRow;
            }
            else{
                selectedRowIndex = -1;
                jXTable1.clearSelection();
            }
        }
    }//GEN-LAST:event_jXTable1MouseClicked

    private void txtDescriptionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDescriptionFocusLost
        if(txtDescription.getText() == null ? organic.RENAME != null : !txtDescription.getText().equals(organic.RENAME)){
            l.myAction(new UpdateLevelEvent(this, "Organic Amendments", "Level " + level + ": " + txtDescription.getText(), level - 1));
        }
    }//GEN-LAST:event_txtDescriptionFocusLost

    private Vector SetRow(OrganicApplication organicApp) {

        Vector vector = new Vector();
        try
        {
            Locale l = new Locale("en", "US");
            SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy", l);
            vector.addElement(df.format(organicApp.RDATE));

            rdDaysAfterPlanting.setSelected(false);
            rdReportedDates.setSelected(true);
        }
        catch(Exception ex)
        {
            vector.add(organicApp.RDAY);
            rdDaysAfterPlanting.setSelected(true);
            rdReportedDates.setSelected(false);
        }

        try
        {
            vector.add(ResiduesList.GetAt(organicApp.RCOD).Description);
        }
        catch(Exception ex) {
            vector.add("");
        }
        try
        {
            vector.add(organicApp.RAMT);
        }
        catch(Exception ex) {
            vector.add("");
        }
        try
        {
            vector.add(organicApp.RESN);
        }
        catch(Exception ex) {
            vector.add("");
        }
        try
        {
            vector.add(organicApp.RESP);
        }
        catch(Exception ex) {
            vector.add("");
        }
        try
        {
            vector.add(organicApp.RESK);
        }
        catch(Exception ex) {
            vector.add("");
        }
        try
        {
            vector.add(organicApp.RINP);
        }
        catch(Exception ex) {
            vector.add("");
        }
        try
        {
            vector.add(organicApp.RDEP);
        }
        catch(Exception ex) {
            vector.add("");
        }
        try
        {
            vector.add(FertilizerMethodList.GetAt(organicApp.RMET).Description);
        }
        catch(Exception ex) {
            vector.add("");
        }

        return vector;
    }

    private void LoadOrganic() {
        txtYear.setText(FileX.general.Year);

        DefaultTableModel model = (DefaultTableModel) jXTable1.getModel();
        for(int i = 0;i < organic.GetSize();i++)
        {
            model.addRow(SetRow(organic.GetApp(i)));
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bnAddLayer;
    private javax.swing.JButton bnDeleteLayer;
    private javax.swing.JLabel imagePanel;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXLabel jXLabel1;
    private org.jdesktop.swingx.JXLabel jXLabel2;
    private org.jdesktop.swingx.JXTable jXTable1;
    private org.jdesktop.swingx.JXLabel lblLevel;
    private javax.swing.JRadioButton rdDaysAfterPlanting;
    private javax.swing.JRadioButton rdReportedDates;
    private xbuild.Components.XTextField txtDescription;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables
}
