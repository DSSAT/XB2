/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TreatmentFrame.java
 *
 * Created on Mar 18, 2010, 11:17:05 PM
 */

package xbuild;

import DSSATModel.ExperimentType;
import Extensions.Utils;
import FileXModel.Treatment;
import FileXModel.FileX;
import FileXDialog.CultivarDialog;
import FileXDialog.FieldDialog;
import java.awt.Point;
import java.awt.event.WindowEvent;
import java.awt.event.WindowFocusListener;
import javax.swing.event.TableModelEvent;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jazzy
 */
public class TreatmentFrame extends javax.swing.JInternalFrame {

    /** Creates new form TreatmentFrame */
    public TreatmentFrame() {
        initComponents();
        LoadTreament();        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bnAddLayer = new javax.swing.JButton();
        bnDeleteLayer = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jXTable1 = new org.jdesktop.swingx.JXTable();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        setPreferredSize(new java.awt.Dimension(767, 677));

        bnAddLayer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Plus.png"))); // NOI18N
        bnAddLayer.setText("Add");
        bnAddLayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnAddLayerActionPerformed(evt);
            }
        });

        bnDeleteLayer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Minus.png"))); // NOI18N
        bnDeleteLayer.setText("Delete");
        bnDeleteLayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnDeleteLayerActionPerformed(evt);
            }
        });

        jXTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Level", "<html>Rot.<br>Number</html>", "<html>Rot.<br>Option</html>", "<html>Crop<br>Comp.</html>", "Description", "Cultivar", "Field", "<html>Soil<br>Anal.<html>", "<html>Init.<br>Cond.<html>", "Plant", "Irrigat.", "Fertil.", "Resid.", "<html><p align='center'>Chem<br>App.</p></html>", "Tillage", "<html><p align='center'>Env.<br>Mod</p></html>", "Harvest", "<html><p align='center'>Sim.<br>Contr.</p></html>"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jXTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jXTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jXTable1);
        if (jXTable1.getColumnModel().getColumnCount() > 0) {
            jXTable1.getColumnModel().getColumn(0).setPreferredWidth(50);
            jXTable1.getColumnModel().getColumn(1).setPreferredWidth(70);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 745, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bnAddLayer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bnDeleteLayer)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bnAddLayer)
                    .addComponent(bnDeleteLayer))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 581, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jXTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jXTable1MouseClicked
        int row = jXTable1.getSelectedRow();

        if(row > jXTable1.getRowCount());
        int col = jXTable1.getSelectedColumn();

        //jXTable1.getColumnModel().getColumn(col).getWidth();
        Point p = jXTable1.getLocationOnScreen();
        
        for(int i = 0;i < col;i++)
            p.x += jXTable1.getColumnModel().getColumn(i).getWidth();

        p.y += (row + 1) * jXTable1.getRowHeight();

        int addCol = "Sequential".equals(FileX.general.FileType) ? 3 : 0;

        if(col == 2 + addCol) ShowCultivar(col, row, p);
        else if(col == 3 + addCol) ShowField(col, row, p);
        else if(col == 4 + addCol) ShowSoilAnalysis(col, row, p);
        else if(col == 5 + addCol) ShowInitial(col, row, p);
        else if(col == 6 + addCol) ShowPlant(col, row, p);
        else if(col == 7 + addCol) ShowIrrigation(col, row, p);
        else if(col == 8 + addCol) ShowFertilizer(col, row, p);
        else if(col == 9 + addCol) ShowOrganic(col, row, p);
        else if(col == 10 + addCol) ShowChemical(col, row, p);
        else if(col == 11 + addCol) ShowTillage(col, row, p);
        else if(col == 12 + addCol) ShowEnvironment(col, row, p);
        else if(col == 13 + addCol) ShowHarvest(col, row, p);
        else if(col == 14 + addCol) ShowSimulation(col, row, p);
    }//GEN-LAST:event_jXTable1MouseClicked

    private void bnAddLayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnAddLayerActionPerformed
        int row = jXTable1.getSelectedRow();
        Treatment treatment = null;
        if (row >= 0) {
            treatment = FileX.treaments.GetAt(row).Clone();
            if(!"Sequential".equals(FileX.general.FileType)){
                treatment.N = jXTable1.getRowCount() + 1;
            }
        } else {
            treatment = new Treatment();
            treatment.N = "Sequential".equals(FileX.general.FileType) ? 1 : jXTable1.getRowCount() + 1;
        }

        FileX.treaments.AddNew(treatment);
        LoadTreament();
    }//GEN-LAST:event_bnAddLayerActionPerformed

    private void bnDeleteLayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnDeleteLayerActionPerformed
        int row = jXTable1.getSelectedRow();
        FileX.treaments.RemoveAt(row);
        LoadTreament();
    }//GEN-LAST:event_bnDeleteLayerActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bnAddLayer;
    private javax.swing.JButton bnDeleteLayer;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXTable jXTable1;
    // End of variables declaration//GEN-END:variables

    private void ShowCultivar(final int col, final int row, Point p) {
        final CultivarDialog dialog = new CultivarDialog();
        dialog.setLocation(p);
        dialog.show();
        
        dialog.addWindowFocusListener(new WindowFocusListener() {

            @Override
            public void windowGainedFocus(WindowEvent e) {

            }

            @Override
            public void windowLostFocus(WindowEvent e) {
                dialog.dispose();
            }
        });

        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                Integer level = dialog.GetLevel();
                if(level != null){
                    FileX.treaments.GetAt(row).CU = level;
                    LoadTreament();
                }
            }
        });
    }

    private void ShowField(final int col, final int row, Point p) {
        final FieldDialog dialog = new FieldDialog();
        dialog.setLocation(p);
        dialog.show();

        dialog.addWindowFocusListener(new WindowFocusListener() {

            @Override
            public void windowGainedFocus(WindowEvent e) {

            }

            @Override
            public void windowLostFocus(WindowEvent e) {
                dialog.dispose();
            }
        });

        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                Integer level = dialog.GetLevel();
                if(level != null){
                    FileX.treaments.GetAt(row).FL = level;
                    LoadTreament();
                }
            }
        });
    }

    private void ShowSoilAnalysis(final int col, final int row, Point p) {
        final FileXDialog.SoilAnalysisDialog dialog = new FileXDialog.SoilAnalysisDialog();
        dialog.setLocation(p);
        dialog.show();

        dialog.addWindowFocusListener(new WindowFocusListener() {

            @Override
            public void windowGainedFocus(WindowEvent e) {

            }

            @Override
            public void windowLostFocus(WindowEvent e) {
                dialog.dispose();
            }
        });

        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                Integer level = dialog.GetLevel();
                if(level != null){
                    FileX.treaments.GetAt(row).SA = level;
                    LoadTreament();
                }
            }
        });
    }

    private void ShowInitial(final int col, final int row, Point p) {
        final FileXDialog.InitialDialog dialog = new FileXDialog.InitialDialog();
        dialog.setLocation(p);
        dialog.show();

        dialog.addWindowFocusListener(new WindowFocusListener() {

            @Override
            public void windowGainedFocus(WindowEvent e) {

            }

            @Override
            public void windowLostFocus(WindowEvent e) {
                dialog.dispose();
            }
        });

        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                Integer level = dialog.GetLevel();
                if(level != null){
                    FileX.treaments.GetAt(row).IC = level;
                    LoadTreament();
                }
            }
        });
    }

    private void ShowSimulation(final int col, final int row, Point p) {
        final FileXDialog.SimulationDialog dialog = new FileXDialog.SimulationDialog();
        dialog.setLocation(p);
        dialog.show();

        dialog.addWindowFocusListener(new WindowFocusListener() {

            @Override
            public void windowGainedFocus(WindowEvent e) {

            }

            @Override
            public void windowLostFocus(WindowEvent e) {
                dialog.dispose();
            }
        });

        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                Integer level = dialog.GetLevel();
                if(level != null){
                    FileX.treaments.GetAt(row).SM = level;
                    LoadTreament();
                }
            }
        });
    }

    private void ShowHarvest(final int col, final int row, Point p) {
        final FileXDialog.HarvestlDialog dialog = new FileXDialog.HarvestlDialog();
        dialog.setLocation(p);
        dialog.show();

        dialog.addWindowFocusListener(new WindowFocusListener() {

            @Override
            public void windowGainedFocus(WindowEvent e) {

            }

            @Override
            public void windowLostFocus(WindowEvent e) {
                dialog.dispose();
            }
        });

        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                Integer level = dialog.GetLevel();
                if(level != null){
                    FileX.treaments.GetAt(row).MH = level;
                    LoadTreament();
                }
            }
        });
    }

    private void ShowEnvironment(final int col, final int row, Point p) {
        final FileXDialog.EnvironmentalDialog dialog = new FileXDialog.EnvironmentalDialog();
        dialog.setLocation(p);
        dialog.show();

        dialog.addWindowFocusListener(new WindowFocusListener() {

            @Override
            public void windowGainedFocus(WindowEvent e) {

            }

            @Override
            public void windowLostFocus(WindowEvent e) {
                dialog.dispose();
            }
        });

        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                Integer level = dialog.GetLevel();
                if(level != null){
                    FileX.treaments.GetAt(row).ME = level;
                    LoadTreament();
                }
            }
        });
    }

    private void ShowTillage(final int col, final int row, Point p) {
        final FileXDialog.TillageDialog dialog = new FileXDialog.TillageDialog();
        dialog.setLocation(p);
        dialog.show();

        dialog.addWindowFocusListener(new WindowFocusListener() {

            @Override
            public void windowGainedFocus(WindowEvent e) {

            }

            @Override
            public void windowLostFocus(WindowEvent e) {
                dialog.dispose();
            }
        });

        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                Integer level = dialog.GetLevel();
                if(level != null){
                    FileX.treaments.GetAt(row).MT = level;
                    LoadTreament();
                }
            }
        });
    }

    private void ShowChemical(final int col, final int row, Point p) {
        final FileXDialog.ChemicalDialog dialog = new FileXDialog.ChemicalDialog();
        dialog.setLocation(p);
        dialog.show();

        dialog.addWindowFocusListener(new WindowFocusListener() {

            @Override
            public void windowGainedFocus(WindowEvent e) {

            }

            @Override
            public void windowLostFocus(WindowEvent e) {
                dialog.dispose();
            }
        });

        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                Integer level = dialog.GetLevel();
                if(level != null){
                    FileX.treaments.GetAt(row).MC = level;
                    LoadTreament();
                }
            }
        });
    }

    private void ShowOrganic(final int col, final int row, Point p) {
        final FileXDialog.OrganicDialog dialog = new FileXDialog.OrganicDialog();
        dialog.setLocation(p);
        dialog.show();

        dialog.addWindowFocusListener(new WindowFocusListener() {

            @Override
            public void windowGainedFocus(WindowEvent e) {

            }

            @Override
            public void windowLostFocus(WindowEvent e) {
                dialog.dispose();
            }
        });

        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                Integer level = dialog.GetLevel();
                if(level != null){
                    FileX.treaments.GetAt(row).MR = level;
                    LoadTreament();
                }
            }
        });
    }

    private void ShowFertilizer(final int col, final int row, Point p) {
        final FileXDialog.FertilizerDialog dialog = new FileXDialog.FertilizerDialog();
        dialog.setLocation(p);
        dialog.show();

        dialog.addWindowFocusListener(new WindowFocusListener() {

            @Override
            public void windowGainedFocus(WindowEvent e) {

            }

            @Override
            public void windowLostFocus(WindowEvent e) {
                dialog.dispose();
            }
        });

        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                Integer level = dialog.GetLevel();
                if(level != null){
                    FileX.treaments.GetAt(row).MF = level;
                    LoadTreament();
                }
            }
        });
    }

    private void ShowIrrigation(final int col, final int row, Point p) {
        final FileXDialog.IrrigationDialog dialog = new FileXDialog.IrrigationDialog();
        dialog.setLocation(p);
        dialog.show();

        dialog.addWindowFocusListener(new WindowFocusListener() {

            @Override
            public void windowGainedFocus(WindowEvent e) {

            }

            @Override
            public void windowLostFocus(WindowEvent e) {
                dialog.dispose();
            }
        });

        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                Integer level = dialog.GetLevel();
                if(level != null){
                    FileX.treaments.GetAt(row).MI = level;
                    LoadTreament();
                }
            }
        });
    }

    private void ShowPlant(final int col, final int row, Point p) {
        final FileXDialog.PlantingDialog dialog = new FileXDialog.PlantingDialog();
        dialog.setLocation(p);
        dialog.show();

        dialog.addWindowFocusListener(new WindowFocusListener() {

            @Override
            public void windowGainedFocus(WindowEvent e) {

            }

            @Override
            public void windowLostFocus(WindowEvent e) {
                dialog.dispose();
            }
        });

        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                Integer level = dialog.GetLevel();
                if(level != null){
                    FileX.treaments.GetAt(row).MP = level;
                    LoadTreament();
                }
            }
        });
    }

    private void LoadTreament() {
        DefaultTableModel tbModel = new DefaultTableModel();
        
        DefaultTableModel oldModel = (DefaultTableModel)jXTable1.getModel();
        
        for(int i = 0; i < oldModel.getColumnCount();i++){
            tbModel.addColumn(oldModel.getColumnName(i));
        }       
        
        jXTable1.setModel(tbModel);
        for(int i = 0;i < FileX.treaments.GetSize();i++)
        {
            Treatment treatment = FileX.treaments.GetAt(i);
            Object row[] = new Object[18];
            row[0] = treatment.N;
            try {
                row[1] = treatment.R;
            } catch (Exception e) {
                row[1] = "";
            }
            try {
                row[2] = treatment.O;
            } catch (Exception e) {
                row[2] = "";
            }
            try {
                row[3] = treatment.C;
            } catch (Exception e) {
                row[3] = "";
            }
            
            try {
                row[4] = treatment.TNAME;
            } catch (Exception e) {
                row[4] = "";
            }
            try {
                row[5] = treatment.CU;
            } catch (Exception e) {
                row[5] = "";
            }
            try {
                row[6] = treatment.FL;
            } catch (Exception e) {
                row[6] = "";
            }
            try {
                row[7] = treatment.SA;
            } catch (Exception e) {
                row[7] = "";
            }
            try {
                row[8] = treatment.IC;
            } catch (Exception e) {
                row[8] = "";
            }
            try {
                row[9] = treatment.MP;
            } catch (Exception e) {
                row[0] = "";
            }
            try {
                row[10] = treatment.MI;
            } catch (Exception e) {
                row[10] = "";
            }
            try {
                row[11] = treatment.MF;
            } catch (Exception e) {
                row[11] = "";
            }
            try {
                row[12] = treatment.MR;
            } catch (Exception e) {
                row[12] = "";
            }
            try {
                row[13] = treatment.MC;
            } catch (Exception e) {
                row[13] = "";
            }
            try {
                row[14] = treatment.MT;
            } catch (Exception e) {
                row[14] = "";
            }
            try {
                row[15] = treatment.ME;
            } catch (Exception e) {
                row[15] = "";
            }
            try {
                row[16] = treatment.MH;
            } catch (Exception e) {
                row[16] = "";
            }
            try {
                row[17] = treatment.SM;
            } catch (Exception e) {
                row[17] = "";
            }
            tbModel.addRow(row);
        }
        
        tbModel.addTableModelListener((TableModelEvent e) -> {
            int row = e.getFirstRow();
            DefaultTableModel tbModel1 = (DefaultTableModel) jXTable1.getModel();
            
            FileX.treaments.GetAt(row).TNAME = (String) tbModel1.getValueAt(row, 4);
            FileX.treaments.GetAt(row).N = Utils.ParseInteger(tbModel1.getValueAt(row, 0));
            if (FileX.general.FileType == ExperimentType.Sequential) {
                FileX.treaments.GetAt(row).R = (String) tbModel1.getValueAt(row, 1);
                FileX.treaments.GetAt(row).O = (String) tbModel1.getValueAt(row, 2);
                FileX.treaments.GetAt(row).C = (String) tbModel1.getValueAt(row, 3);
            }
        });
        
        if(ExperimentType.Sequential != FileX.general.FileType){
            jXTable1.removeColumn(jXTable1.getColumnModel().getColumn(3));
            jXTable1.removeColumn(jXTable1.getColumnModel().getColumn(2));
            jXTable1.removeColumn(jXTable1.getColumnModel().getColumn(1));
        }
    }

}
