/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainForm.java
 *
 * Created on Mar 11, 2010, 11:27:37 AM
 */

package xbuild;

import FileX.*;
import Library.DssatProfile;
import Library.Setup;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.beans.PropertyVetoException;
import java.io.File;
import java.io.IOException;
import java.util.Vector;
import java.util.logging.*;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import org.jdesktop.swingx.JXFrame;
import Tools.CustomDefaultTreeCellRenderer;
import Tools.CustomNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.TreeCellRenderer;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;

/**
 *
 * @author Jazzy
 */
public class MainForm extends javax.swing.JFrame implements MyEventListener {

    /** Creates new form MainForm */

    protected GeneralInfoFrame generalFrame;
    protected GeneralNotesFrame generalNoteFrame;
    protected FieldFrame fieldFrame;
    protected InitialFrame initialFrame;
    protected SoilAnalysisFrame soilAnalysisFrame;
    protected EnvironmentalFrame environmentalFrame;
    protected CultivarsFrame cultivarsFrame;
    protected PlantingFrame plantingFrame;
    protected IrrigationFrame irrigationFrame;
    protected FertilizerFrame fertilizerFrame;
    protected OrganicFrame organicFrame;
    protected TillageFrame tillageFrame;
    protected HarvestFrame harvestFrame;
    protected ChemicalFrame chemicalFrame;
    protected SimulationFrame simulationFrame;
    protected TreatmentFrame treatmentFrame;

    protected Vector eventListner = new Vector();
    protected Content content;

    public MainForm() {
        initComponents();

        Toolkit tk = Toolkit.getDefaultToolkit();
        Dimension screenSize = tk.getScreenSize();
        int screenHeight = screenSize.height;
        int screenWidth = screenSize.width;
        Dimension winSize = getSize();
        setLocation((screenWidth - winSize.width) / 2 , (screenHeight - winSize.height) / 2);

        jXTree1.setVisible(false);
        jXTree1.expandAll();
        jXTree1.setCellRenderer(new CustomDefaultTreeCellRenderer());

        BufferedImage image = null;
        try
        {
            image = ImageIO.read(getClass().getResource("/icons/32/XBuild.png"));
        }
        catch(IOException ex)
        {
            System.out.println(ex.getMessage());
        }

        setIconImage(image);

        jMenuTreatment.setEnabled(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenuSimAdd = new javax.swing.JPopupMenu();
        jMenuItemSimAdd = new javax.swing.JMenuItem();
        jPopupMenuSimItem = new javax.swing.JPopupMenu();
        jPopupMenuSimItemCopy = new javax.swing.JMenuItem();
        jPopupMenuSimItemRemove = new javax.swing.JMenuItem();
        desktopPane = new javax.swing.JDesktopPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jXTree1 = new org.jdesktop.swingx.JXTree();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuNewFile = new javax.swing.JMenuItem();
        jMenuOpenFile = new javax.swing.JMenuItem();
        jMenuCloseFile = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuSaveFile = new javax.swing.JMenuItem();
        jMenuSaveAsFile = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuExit = new javax.swing.JMenuItem();
        jMenuTreatment = new javax.swing.JMenu();
        jMenuRefresh = new javax.swing.JMenu();
        jSetupMenu = new javax.swing.JMenu();
        jMenuHelp = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        jMenuItemSimAdd.setText("Add New");
        jMenuItemSimAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSimAddActionPerformed(evt);
            }
        });
        jPopupMenuSimAdd.add(jMenuItemSimAdd);

        jPopupMenuSimItemCopy.setText("Copy Level");
        jPopupMenuSimItemCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPopupMenuSimItemCopyActionPerformed(evt);
            }
        });
        jPopupMenuSimItem.add(jPopupMenuSimItemCopy);

        jPopupMenuSimItemRemove.setText("Remove Level");
        jPopupMenuSimItemRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPopupMenuSimItemRemoveActionPerformed(evt);
            }
        });
        jPopupMenuSimItem.add(jPopupMenuSimItemRemove);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("FileX");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("General Information");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Notes");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Environment");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Fields");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Initial Conditions");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Soil Analysis");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Environmental Modifications");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Management");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Cultivars");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Planting");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Irrigation");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Fertilizer");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Organic Amendments");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Tillage");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Harvest");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Chemical Applications");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Simulation Controls");
        treeNode1.add(treeNode2);
        jXTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jXTree1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jXTree1MouseReleased(evt);
            }
        });
        jXTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jXTree1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jXTree1);

        jMenuFile.setText("File");

        jMenuNewFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/16/filenew.png"))); // NOI18N
        jMenuNewFile.setText("New File");
        jMenuNewFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuNewFileActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuNewFile);

        jMenuOpenFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/16/fileopen.png"))); // NOI18N
        jMenuOpenFile.setText("Open File");
        jMenuOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuOpenFileActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuOpenFile);

        jMenuCloseFile.setText("Close File");
        jMenuCloseFile.setEnabled(false);
        jMenuCloseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuCloseFileActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuCloseFile);
        jMenuFile.add(jSeparator1);

        jMenuSaveFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/16/filesave.png"))); // NOI18N
        jMenuSaveFile.setText("Save File");
        jMenuSaveFile.setEnabled(false);
        jMenuSaveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSaveFileActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuSaveFile);

        jMenuSaveAsFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/16/filesaveas.png"))); // NOI18N
        jMenuSaveAsFile.setText("Save File As..");
        jMenuSaveAsFile.setEnabled(false);
        jMenuSaveAsFile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuSaveAsFileMouseClicked(evt);
            }
        });
        jMenuFile.add(jMenuSaveAsFile);
        jMenuFile.add(jSeparator2);

        jMenuExit.setText("Exit");
        jMenuExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuExitMouseClicked(evt);
            }
        });
        jMenuFile.add(jMenuExit);

        jMenuBar1.add(jMenuFile);

        jMenuTreatment.setText("Treatment");
        jMenuTreatment.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                jMenuTreatmentMenuSelected(evt);
            }
        });
        jMenuBar1.add(jMenuTreatment);

        jMenuRefresh.setText("Refresh");
        jMenuRefresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuRefreshMouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenuRefresh);

        jSetupMenu.setText("Setup");
        jSetupMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSetupMenuMouseClicked(evt);
            }
        });
        jMenuBar1.add(jSetupMenu);

        jMenuHelp.setText("Help");

        jMenuItem1.setText("Content");
        jMenuItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem1MouseClicked(evt);
            }
        });
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenuHelp.add(jMenuItem1);

        jMenuItem2.setText("Technical Support");
        jMenuHelp.add(jMenuItem2);

        jMenuItem3.setText("About");
        jMenuHelp.add(jMenuItem3);

        jMenuBar1.add(jMenuHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 773, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 679, Short.MAX_VALUE)
            .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 679, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("empty-statement")
    private void jXTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jXTree1ValueChanged
        // TODO add your handling code here:

        DefaultMutableTreeNode node = (DefaultMutableTreeNode) jXTree1.getLastSelectedPathComponent();

        if (node == null) return;

        Object nodeInfo = node.getUserObject();
        //if (node.isLeaf())
        {
            // <editor-fold defaultstate="collapsed" desc="General Information">
            if(nodeInfo.toString().equals("General Information")) {
                if(generalFrame != null) {
                    generalFrame.dispose();
                    generalFrame = null;
                }

                if(generalFrame == null){
                    generalFrame = new GeneralInfoFrame();

                    setRootPaneCheckingEnabled(false);
                    javax.swing.plaf.InternalFrameUI ui = generalFrame.getUI();
                    ((javax.swing.plaf.basic.BasicInternalFrameUI)ui).setNorthPane(null);

                    desktopPane.add(generalFrame);
                    try {
                        generalFrame.setMaximum(true);
                    } catch (PropertyVetoException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    generalFrame.show();
                }
                /*else if(!generalFrame.isSelected()){
                     try {
                        generalFrame.setSelected(true);
                     } catch (PropertyVetoException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                     }
                 }*/

                generalFrame.addMyEventListener(this);
            }
            //</editor-fold>
            // <editor-fold defaultstate="collapsed" desc="General Information - Notes">
            else if(nodeInfo.toString().equals("Notes")) {
                if(generalNoteFrame != null) {
                    generalNoteFrame.dispose();
                    generalNoteFrame = null;
                }

                if(generalNoteFrame == null){
                    generalNoteFrame = new GeneralNotesFrame();

                    setRootPaneCheckingEnabled(false);
                    javax.swing.plaf.InternalFrameUI ui = generalNoteFrame.getUI();
                    ((javax.swing.plaf.basic.BasicInternalFrameUI)ui).setNorthPane(null);

                    desktopPane.add(generalNoteFrame);
                    try {
                        generalNoteFrame.setMaximum(true);
                    } catch (PropertyVetoException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    generalNoteFrame.show();
                }
                /*else if(!generalFrame.isSelected()){
                     try {
                        generalFrame.setSelected(true);
                     } catch (PropertyVetoException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                     }
                 }*/
            }
            //</editor-fold>
            //<editor-fold defaultstate="collapsed" desc="Fields">
            else if(nodeInfo.toString().equals("Fields")) {
                if(fieldFrame != null) {
                    fieldFrame.dispose();
                    fieldFrame = null;
                }

                if(fieldFrame == null){
                    fieldFrame = new FieldFrame();

                    setRootPaneCheckingEnabled(false);
                    javax.swing.plaf.InternalFrameUI ui = fieldFrame.getUI();
                    ((javax.swing.plaf.basic.BasicInternalFrameUI)ui).setNorthPane(null);

                    desktopPane.add(fieldFrame);
                    try {
                        fieldFrame.setMaximum(true);
                    } catch (PropertyVetoException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    fieldFrame.show();
                }
                /*else if(!fieldFrame.isSelected()){
                     try {
                        fieldFrame.setSelected(true);
                     } catch (PropertyVetoException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                     }
                 }*/
            }
            //</editor-fold>
            // <editor-fold defaultstate="collapsed" desc="Initial Conditions">
            else if(nodeInfo.toString().equals("Initial Conditions")) {
                if(initialFrame != null) {
                    initialFrame.dispose();
                    initialFrame = null;
                }

                if(initialFrame == null){
                    initialFrame = new InitialFrame();

                    setRootPaneCheckingEnabled(false);
                    javax.swing.plaf.InternalFrameUI ui = initialFrame.getUI();
                    ((javax.swing.plaf.basic.BasicInternalFrameUI)ui).setNorthPane(null);

                    desktopPane.add(initialFrame);
                    try {
                        initialFrame.setMaximum(true);
                    } catch (PropertyVetoException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    initialFrame.show();
                }
                /*else if(!initialFrame.isSelected()){
                     try {
                        initialFrame.setSelected(true);
                     } catch (PropertyVetoException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                     }
                 }*/
            }
            // </editor-fold>
            //<editor-fold defaultstate="collapsed" desc="Soil Analysis">
            else if(nodeInfo.toString().equals("Soil Analysis")) {
                if(soilAnalysisFrame != null) {
                    soilAnalysisFrame.dispose();
                    soilAnalysisFrame = null;
                }

                if(soilAnalysisFrame == null){
                    soilAnalysisFrame = new SoilAnalysisFrame();

                    setRootPaneCheckingEnabled(false);
                    javax.swing.plaf.InternalFrameUI ui = soilAnalysisFrame.getUI();
                    ((javax.swing.plaf.basic.BasicInternalFrameUI)ui).setNorthPane(null);

                    desktopPane.add(soilAnalysisFrame);
                    try {
                        soilAnalysisFrame.setMaximum(true);
                    } catch (PropertyVetoException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    soilAnalysisFrame.show();
                }
                /*else if(!soilAnalysisFrame.isSelected()){
                     try {
                        soilAnalysisFrame.setSelected(true);
                     } catch (PropertyVetoException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                     }
                 }*/
            }
            // </editor-fold>
            // <editor-fold defaultstate="collapsed" desc="Environmental Modifications">
            else if(nodeInfo.toString().equals("Environmental Modifications")) {
                if(environmentalFrame != null) {
                    environmentalFrame.dispose();
                    environmentalFrame = null;
                }

                if(environmentalFrame == null){
                    environmentalFrame = new EnvironmentalFrame();

                    setRootPaneCheckingEnabled(false);
                    javax.swing.plaf.InternalFrameUI ui = environmentalFrame.getUI();
                    ((javax.swing.plaf.basic.BasicInternalFrameUI)ui).setNorthPane(null);

                    desktopPane.add(environmentalFrame);
                    try {
                        environmentalFrame.setMaximum(true);
                    } catch (PropertyVetoException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    environmentalFrame.show();
                }
                /*else if(!environmentalFrame.isSelected()){
                     try {
                        environmentalFrame.setSelected(true);
                     } catch (PropertyVetoException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                     }
                 }*/
            }
            //</editor-fold>
            // <editor-fold defaultstate="collapsed" desc="Cultivars">
            else if(nodeInfo.toString().equals("Cultivars")) {
                if(cultivarsFrame != null) {
                    cultivarsFrame.dispose();
                    cultivarsFrame = null;
                }

                if(cultivarsFrame == null){
                    cultivarsFrame = new CultivarsFrame();

                    setRootPaneCheckingEnabled(false);
                    javax.swing.plaf.InternalFrameUI ui = cultivarsFrame.getUI();
                    ((javax.swing.plaf.basic.BasicInternalFrameUI)ui).setNorthPane(null);

                    desktopPane.add(cultivarsFrame);
                    try {
                        cultivarsFrame.setMaximum(true);
                    } catch (PropertyVetoException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    cultivarsFrame.show();
                }
                /*else if(!cultivarsFrame.isSelected()){
                     try {
                        cultivarsFrame.setSelected(true);
                     } catch (PropertyVetoException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                     }
                 }*/
            }
            //</editor-fold>
            // <editor-fold defaultstate="collapsed" desc="Planting">
            else if(nodeInfo.toString().equals("Planting")) {
                if(plantingFrame != null) {
                    plantingFrame.dispose();
                    plantingFrame = null;
                }

                if(plantingFrame == null){
                    plantingFrame = new PlantingFrame();

                    setRootPaneCheckingEnabled(false);
                    javax.swing.plaf.InternalFrameUI ui = plantingFrame.getUI();
                    ((javax.swing.plaf.basic.BasicInternalFrameUI)ui).setNorthPane(null);

                    desktopPane.add(plantingFrame);
                    try {
                        plantingFrame.setMaximum(true);
                    } catch (PropertyVetoException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    plantingFrame.show();
                }
                /*else if(!plantingFrame.isSelected()){
                     try {
                        plantingFrame.setSelected(true);
                     } catch (PropertyVetoException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                     }
                 }*/
            }
            //</editor-fold>
            // <editor-fold defaultstate="collapsed" desc="Irrigation">
            else if(nodeInfo.toString().equals("Irrigation")) {
                if(irrigationFrame != null) {
                    irrigationFrame.dispose();
                    irrigationFrame = null;
                }

                if(irrigationFrame == null){
                    irrigationFrame = new IrrigationFrame();

                    setRootPaneCheckingEnabled(false);
                    javax.swing.plaf.InternalFrameUI ui = irrigationFrame.getUI();
                    ((javax.swing.plaf.basic.BasicInternalFrameUI)ui).setNorthPane(null);

                    desktopPane.add(irrigationFrame);
                    try {
                        irrigationFrame.setMaximum(true);
                    } catch (PropertyVetoException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    irrigationFrame.show();
                }
                /*else if(!irrigationFrame.isSelected()){
                     try {
                        irrigationFrame.setSelected(true);
                     } catch (PropertyVetoException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                     }
                 }*/
            }
            //</editor-fold>
            // <editor-fold defaultstate="collapsed" desc="Fertilizer">
            else if(nodeInfo.toString().equals("Fertilizer")) {
                if(fertilizerFrame != null) {
                    fertilizerFrame.dispose();
                    fertilizerFrame = null;
                }

                if(fertilizerFrame == null){
                    fertilizerFrame = new FertilizerFrame();

                    setRootPaneCheckingEnabled(false);
                    javax.swing.plaf.InternalFrameUI ui = fertilizerFrame.getUI();
                    ((javax.swing.plaf.basic.BasicInternalFrameUI)ui).setNorthPane(null);

                    desktopPane.add(fertilizerFrame);
                    try {
                        fertilizerFrame.setMaximum(true);
                    } catch (PropertyVetoException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    fertilizerFrame.show();
                }
                /*else if(!fertilizerFrame.isSelected()){
                     try {
                        fertilizerFrame.setSelected(true);
                     } catch (PropertyVetoException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                     }
                 }*/
            }
            //</editor-fold>
            // <editor-fold defaultstate="collapsed" desc="Organic Amendments">
            else if(nodeInfo.toString().equals("Organic Amendments")) {
                if(organicFrame != null) {
                    organicFrame.dispose();
                    organicFrame = null;
                }

                if(organicFrame == null){
                    organicFrame = new OrganicFrame();

                    setRootPaneCheckingEnabled(false);
                    javax.swing.plaf.InternalFrameUI ui = organicFrame.getUI();
                    ((javax.swing.plaf.basic.BasicInternalFrameUI)ui).setNorthPane(null);

                    desktopPane.add(organicFrame);
                    try {
                        organicFrame.setMaximum(true);
                    } catch (PropertyVetoException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    organicFrame.show();
                }
                /*else if(!organicFrame.isSelected()){
                     try {
                        organicFrame.setSelected(true);
                     } catch (PropertyVetoException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                     }
                 }*/
            }
            //</editor-fold>
            // <editor-fold defaultstate="collapsed" desc="Tillage">
            else if(nodeInfo.toString().equals("Tillage")) {
                if(tillageFrame != null) {
                    tillageFrame.dispose();
                    tillageFrame = null;
                }

                if(tillageFrame == null){
                    tillageFrame = new TillageFrame();

                    setRootPaneCheckingEnabled(false);
                    javax.swing.plaf.InternalFrameUI ui = tillageFrame.getUI();
                    ((javax.swing.plaf.basic.BasicInternalFrameUI)ui).setNorthPane(null);

                    desktopPane.add(tillageFrame);
                    try {
                        tillageFrame.setMaximum(true);
                    } catch (PropertyVetoException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    tillageFrame.show();
                }
                /*else if(!tillageFrame.isSelected()){
                     try {
                        tillageFrame.setSelected(true);
                     } catch (PropertyVetoException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                     }
                 }*/
            }
            //</editor-fold>
            // <editor-fold defaultstate="collapsed" desc="Harvest">
            else if(nodeInfo.toString().equals("Harvest")) {
                if(harvestFrame != null) {
                    harvestFrame.dispose();
                    harvestFrame = null;
                }

                if(harvestFrame == null){
                    harvestFrame = new HarvestFrame();

                    setRootPaneCheckingEnabled(false);
                    javax.swing.plaf.InternalFrameUI ui = harvestFrame.getUI();
                    ((javax.swing.plaf.basic.BasicInternalFrameUI)ui).setNorthPane(null);

                    desktopPane.add(harvestFrame);
                    try {
                        harvestFrame.setMaximum(true);
                    } catch (PropertyVetoException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    harvestFrame.show();
                }
                /*else if(!tillageFrame.isSelected()){
                     try {
                        tillageFrame.setSelected(true);
                     } catch (PropertyVetoException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                     }
                 }*/
            }
            //</editor-fold>
            // <editor-fold defaultstate="collapsed" desc="Chemical Applications">
            else if(nodeInfo.toString().equals("Chemical Applications")) {
                if(chemicalFrame != null) {
                    chemicalFrame.dispose();
                    chemicalFrame = null;
                }

                if(chemicalFrame == null){
                    chemicalFrame = new ChemicalFrame();

                    setRootPaneCheckingEnabled(false);
                    javax.swing.plaf.InternalFrameUI ui = chemicalFrame.getUI();
                    ((javax.swing.plaf.basic.BasicInternalFrameUI)ui).setNorthPane(null);

                    desktopPane.add(chemicalFrame);
                    try {
                        chemicalFrame.setMaximum(true);
                    } catch (PropertyVetoException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    chemicalFrame.show();
                }
                /*else if(!chemicalFrame.isSelected()){
                     try {
                        chemicalFrame.setSelected(true);
                     } catch (PropertyVetoException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                     }
                 }*/
            }
            //</editor-fold>
            // <editor-fold defaultstate="collapsed" desc="Treaments">
            else if(nodeInfo.toString().equals("Treaments")) {
                if(treatmentFrame != null) {
                    treatmentFrame.dispose();
                    treatmentFrame = null;
                }

                if(treatmentFrame == null){
                    treatmentFrame = new TreatmentFrame();

                    setRootPaneCheckingEnabled(false);
                    javax.swing.plaf.InternalFrameUI ui = treatmentFrame.getUI();
                    ((javax.swing.plaf.basic.BasicInternalFrameUI)ui).setNorthPane(null);

                    desktopPane.add(treatmentFrame);
                    try {
                        treatmentFrame.setMaximum(true);
                    } catch (PropertyVetoException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    treatmentFrame.show();
                }
                /*else if(!treatmentFrame.isSelected()){
                     try {
                        treatmentFrame.setSelected(true);
                     } catch (PropertyVetoException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                     }
                 }*/
            }
            //</editor-fold>
            // <editor-fold defaultstate="collapsed" desc="Simulation Controls">
            else if(node != null && node.getParent() != null && node.getParent().toString().equals("Simulation Controls")) {
                if(simulationFrame != null) {
                    simulationFrame.dispose();
                    simulationFrame = null;
                }

                if(simulationFrame == null){
                    for (int i = 0; i < FileX.simulationList.GetSize(); i++) {
                        Simulation s = FileX.simulationList.GetAt(i);
                        if (s.SNAME.equalsIgnoreCase(nodeInfo.toString())) {
                            simulationFrame = new SimulationFrame(s);
                            break;
                        }
                    }  

                    setRootPaneCheckingEnabled(false);
                    javax.swing.plaf.InternalFrameUI ui = simulationFrame.getUI();
                    ((javax.swing.plaf.basic.BasicInternalFrameUI)ui).setNorthPane(null);

                    desktopPane.add(simulationFrame);
                    try {
                        simulationFrame.setMaximum(true);
                    } catch (PropertyVetoException ex) {
                        Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    simulationFrame.show();
                }
            }
            //</editor-fold>
        }
}//GEN-LAST:event_jXTree1ValueChanged

    private void jMenuSaveAsFileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuSaveAsFileMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuSaveAsFileMouseClicked

    private void jMenuExitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuExitMouseClicked
        dispose();
    }//GEN-LAST:event_jMenuExitMouseClicked

    private void jMenuRefreshMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuRefreshMouseClicked
        Setup setup = new Setup();
        new LoadingDataFrame(setup.GetDSSATPath(), setup.GetDSSATVersion()).show();
}//GEN-LAST:event_jMenuRefreshMouseClicked

    private void jSetupMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSetupMenuMouseClicked
        SetupFrame frame = new SetupFrame();
            frame.show();

            frame.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosed(WindowEvent evt) {
                    Setup setup = new Setup();
                    new LoadingDataFrame(setup.GetDSSATPath(), setup.GetDSSATVersion()).show();
                }
            });
    }//GEN-LAST:event_jSetupMenuMouseClicked

    private void jMenuNewFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuNewFileActionPerformed
        jMenuSaveFile.setEnabled(true);
        jMenuCloseFile.setEnabled(true);
        jMenuOpenFile.setEnabled(false);
        jMenuNewFile.setEnabled(false);

        FileX.NewFileX();

        jXTree1.setVisible(true);
        
//        DefaultTreeModel model = (DefaultTreeModel) jXTree1.getModel();       
//        
//        for (int i = 0; i < model.getChildCount(model.getRoot()); i++) {
//            DefaultMutableTreeNode child = (DefaultMutableTreeNode) model.getChild(model.getRoot(), i);
//            for (int c = 0; c < child.getChildCount(); c++) {
//                CustomNode cc = (CustomNode) model.getChild(child, c);
//                cc.setEnabled(false);
//            }
//        }
        
//        TreePath[] path = jXTree1.getSelectionPaths();
//        if (path == null) return;
//        CustomNode node = null;
//        for (int i = 0; i < path.length; i++){
//            node = (CustomNode) path[i].getLastPathComponent();
//            node.setEnabled(false);
//        }
        

        generalFrame = new GeneralInfoFrame();

        setRootPaneCheckingEnabled(false);
        javax.swing.plaf.InternalFrameUI ui = generalFrame.getUI();
        ((javax.swing.plaf.basic.BasicInternalFrameUI)ui).setNorthPane(null);

        desktopPane.add(generalFrame);
        try {
            generalFrame.setMaximum(true);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        generalFrame.show();

        generalFrame.addMyEventListener(this);

        jMenuTreatment.setEnabled(false);
        
    }//GEN-LAST:event_jMenuNewFileActionPerformed

    private void jMenuSaveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSaveFileActionPerformed
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) jXTree1.getModel().getRoot();

        File f = new File(root.getUserObject().toString());

        String target = null;
        try {
            target = DssatProfile.GetAt(FileX.general.crop.CropCode + "D");
        } catch (Exception e) {
            target = new Setup().GetDSSATPath();
        }

        JFileChooser fc = new JFileChooser(target);
        fc.setSelectedFile(f);

        fc.setName(root.getUserObject().toString());
        int returnVal = fc.showSaveDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            if(file.exists()) {
                if(JOptionPane.showConfirmDialog(null, "Do you want to save this file?", "File already existing", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    FileX.SaveFile(file);
                }
                else {
                    return;
                }
            }
            FileX.SaveFile(file);
        }
    }//GEN-LAST:event_jMenuSaveFileActionPerformed

    private void jMenuCloseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuCloseFileActionPerformed
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) jXTree1.getModel().getRoot();
        DefaultMutableTreeNode simsChild = null;
        for(int i = 0 ; i < root.getChildCount();i++){
            DefaultMutableTreeNode child = (DefaultMutableTreeNode) root.getChildAt(i);
            if(child.toString().equals("Simulation Controls")){
                simsChild = child;
                break;
            }
        }
        
        if(simsChild != null){
            simsChild.removeAllChildren();
            DefaultTreeModel model = (DefaultTreeModel)jXTree1.getModel();
            model.reload(simsChild);
        }
        
        
        
        jMenuNewFile.setEnabled(true);
        jMenuSaveFile.setEnabled(false);
        jMenuCloseFile.setEnabled(false);
        jMenuOpenFile.setEnabled(true);
        
        
        
        

        for(JInternalFrame innerFrame : desktopPane.getAllFrames())
            innerFrame.dispose();
        jXTree1.setVisible(false);

        FileX.CloseFile();
    }//GEN-LAST:event_jMenuCloseFileActionPerformed

    private void jMenuOpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuOpenFileActionPerformed
        JFileChooser fc = new JFileChooser(new Setup().GetDSSATPath());
        FileFilter filter1 = new ExtensionFileFilter("File x", new String[] { "x", "X"});

        fc.setFileFilter(filter1);
        
        int returnVal = fc.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            this.setTitle(file.getName());

            FileX.OpenFileX(file);

            DefaultMutableTreeNode root = (DefaultMutableTreeNode) jXTree1.getModel().getRoot();
            root.setUserObject(file.getName());

            DefaultMutableTreeNode simsChild = null;
            for (int i = 0; i < root.getChildCount(); i++) {
                DefaultMutableTreeNode child = (DefaultMutableTreeNode) root.getChildAt(i);
                if (child.toString().equals("Simulation Controls")) {
                    simsChild = child;
                    break;
                }
            }

            if (simsChild != null) {
                simsChild.removeAllChildren();
                DefaultTreeModel model = (DefaultTreeModel) jXTree1.getModel();
                model.reload(simsChild);
                
                for (Simulation sim : FileX.simulationList.GetAll()) {
                    DefaultMutableTreeNode newSim = new DefaultMutableTreeNode();
                    newSim.setUserObject(sim.SNAME + "");
                    simsChild.add(newSim);
                }
            }
            
            jXTree1.collapseAll();
            jXTree1.expandAll();
            jXTree1.setVisible(true);
            
            generalFrame = new GeneralInfoFrame();

            setRootPaneCheckingEnabled(false);
            javax.swing.plaf.InternalFrameUI ui = generalFrame.getUI();
            ((javax.swing.plaf.basic.BasicInternalFrameUI)ui).setNorthPane(null);

            desktopPane.add(generalFrame);
            try {
                generalFrame.setMaximum(true);
            } catch (PropertyVetoException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            generalFrame.show();
            generalFrame.addMyEventListener(this);

            jMenuNewFile.setEnabled(false);
            jMenuSaveFile.setEnabled(true);
            jMenuCloseFile.setEnabled(true);
            jMenuOpenFile.setEnabled(false);

            checkTreatment();
        }
    }//GEN-LAST:event_jMenuOpenFileActionPerformed

    private void jMenuTreatmentMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_jMenuTreatmentMenuSelected
        if(treatmentFrame != null) {
            treatmentFrame.dispose();
            treatmentFrame = null;
        }

        if(treatmentFrame == null){
            treatmentFrame = new TreatmentFrame();

            setRootPaneCheckingEnabled(false);
            javax.swing.plaf.InternalFrameUI ui = treatmentFrame.getUI();
            ((javax.swing.plaf.basic.BasicInternalFrameUI)ui).setNorthPane(null);

            desktopPane.add(treatmentFrame);
            try {
                treatmentFrame.setMaximum(true);
            } catch (PropertyVetoException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            treatmentFrame.show();
        }
        /*else if(!treatmentFrame.isSelected()){
             try {
                treatmentFrame.setSelected(true);
             }
             catch (PropertyVetoException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
             }
         }*/
    }//GEN-LAST:event_jMenuTreatmentMenuSelected

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem1MouseClicked
        // TODO add your handling code here:
       
       

              
                 desktopPane.add(content);



                    content.show();

      
    }//GEN-LAST:event_jMenuItem1MouseClicked

    private void jXTree1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jXTree1MouseReleased
        // TODO add your handling code here:
        int row = jXTree1.getClosestRowForLocation(evt.getX(), evt.getY());
        jXTree1.setSelectionRow(row);
        
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) jXTree1.getLastSelectedPathComponent();
        if (node == null) return;
        Object nodeInfo = node.getUserObject();
        
        if(nodeInfo.toString().equals("Simulation Controls")){
            if(evt.isPopupTrigger()){
                jPopupMenuSimAdd.show(this, evt.getX() + 10, evt.getY() + 55);
            }
        }
        else if(node.getParent().toString().equals("Simulation Controls")){
            if(evt.isPopupTrigger()){
                jPopupMenuSimItem.show(this, evt.getX() + 10, evt.getY() + 55);
            }
        }
    }//GEN-LAST:event_jXTree1MouseReleased

    private void jMenuItemSimAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSimAddActionPerformed
        // TODO add your handling code here:
        String r = JOptionPane.showInputDialog(new JXFrame(), "Please enter your description", "UNKNOWN");
        if(r.length() > 0) {
            for (int i = 0; i < FileX.simulationList.GetSize(); i++) {
                Simulation s = FileX.simulationList.GetAt(i);
                if (s.SNAME.equalsIgnoreCase(r)) {
                    JOptionPane.showMessageDialog(new JXFrame(), "This name is already add", "ERROR", 0);
                    return;
                }
            }
            
            Simulation sim = new Simulation(r);
            FileX.simulationList.AddNew(sim);

            DefaultMutableTreeNode node = (DefaultMutableTreeNode) jXTree1.getLastSelectedPathComponent();
            if (node == null) return;
            DefaultMutableTreeNode newNode = new DefaultMutableTreeNode();
            newNode.setUserObject(r);

            node.add(newNode);

            DefaultTreeModel model = (DefaultTreeModel)jXTree1.getModel();
            model.reload(node);
            
            jXTree1.expandAll();
            int[] rows =  jXTree1.getSelectionRows();
            jXTree1.setSelectionRow(rows[0] + FileX.simulationList.GetSize());
            
            if(simulationFrame != null) {
                simulationFrame.dispose();
                simulationFrame = null;
            }
            
            if(simulationFrame == null){
                simulationFrame = new SimulationFrame(sim);
                
                setRootPaneCheckingEnabled(false);
                javax.swing.plaf.InternalFrameUI ui = simulationFrame.getUI();
                ((javax.swing.plaf.basic.BasicInternalFrameUI)ui).setNorthPane(null);           
                desktopPane.add(simulationFrame);
                try {
                    simulationFrame.setMaximum(true);
                } catch (PropertyVetoException ex) {
                    Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                }
                simulationFrame.show();
            }
        }
    }//GEN-LAST:event_jMenuItemSimAddActionPerformed

    private void jPopupMenuSimItemRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPopupMenuSimItemRemoveActionPerformed
        // TODO add your handling code here:
        if(JOptionPane.showConfirmDialog(new JXFrame(), "Do you want to delete this level") == 0){            
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) jXTree1.getLastSelectedPathComponent();
            DefaultTreeModel model = (DefaultTreeModel)jXTree1.getModel();
            DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) node.getParent();
            model.removeNodeFromParent(node);            
            model.reload(parentNode);
            desktopPane.removeAll();
            desktopPane.repaint();
            FileX.simulationList.RemoveAt(node.toString());
        }
    }//GEN-LAST:event_jPopupMenuSimItemRemoveActionPerformed

    private void jPopupMenuSimItemCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPopupMenuSimItemCopyActionPerformed
        // TODO add your handling code here:
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) jXTree1.getLastSelectedPathComponent();
        String newName = FileX.simulationList.GetCopyName(node.toString());
        
        String r = JOptionPane.showInputDialog(new JXFrame(), "Please enter your description", newName);
        if(r.length() > 0) {
            for (int i = 0; i < FileX.simulationList.GetSize(); i++) {
                Simulation s = FileX.simulationList.GetAt(i);
                if (s.SNAME.equalsIgnoreCase(r)) {
                    JOptionPane.showMessageDialog(new JXFrame(), "This name is already add", "ERROR", 0);
                    return;
                }
            }
            
            Simulation sim = FileX.simulationList.Copy(node.toString(), r);
            FileX.simulationList.AddNew(sim);

            DefaultMutableTreeNode newNode = new DefaultMutableTreeNode();
            newNode.setUserObject(r);
            
            DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) node.getParent();
            parentNode.add(newNode);

            DefaultTreeModel model = (DefaultTreeModel)jXTree1.getModel();
            model.reload(parentNode);
            
            jXTree1.expandAll();
            int[] rows =  jXTree1.getSelectionRows();
            if(rows.length > 0)
                jXTree1.setSelectionRow(rows[0] + FileX.simulationList.GetSize());
            
            if(simulationFrame != null) {
                simulationFrame.dispose();
                simulationFrame = null;
            }
            
            if(simulationFrame == null){
                simulationFrame = new SimulationFrame(sim);
                
                setRootPaneCheckingEnabled(false);
                javax.swing.plaf.InternalFrameUI ui = simulationFrame.getUI();
                ((javax.swing.plaf.basic.BasicInternalFrameUI)ui).setNorthPane(null);           
                desktopPane.add(simulationFrame);
                try {
                    simulationFrame.setMaximum(true);
                } catch (PropertyVetoException ex) {
                    Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                }
                simulationFrame.show();
            }
        }
    }//GEN-LAST:event_jPopupMenuSimItemCopyActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuCloseFile;
    private javax.swing.JMenuItem jMenuExit;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenu jMenuHelp;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItemSimAdd;
    private javax.swing.JMenuItem jMenuNewFile;
    private javax.swing.JMenuItem jMenuOpenFile;
    private javax.swing.JMenu jMenuRefresh;
    private javax.swing.JMenuItem jMenuSaveAsFile;
    private javax.swing.JMenuItem jMenuSaveFile;
    private javax.swing.JMenu jMenuTreatment;
    private javax.swing.JPopupMenu jPopupMenuSimAdd;
    private javax.swing.JPopupMenu jPopupMenuSimItem;
    private javax.swing.JMenuItem jPopupMenuSimItemCopy;
    private javax.swing.JMenuItem jPopupMenuSimItemRemove;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JMenu jSetupMenu;
    private org.jdesktop.swingx.JXTree jXTree1;
    // End of variables declaration//GEN-END:variables

    public void myAction(MyEvent e) {
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) jXTree1.getModel().getRoot();
        root.setUserObject(e.getN());

        jXTree1.collapseAll();
        jXTree1.expandAll();

        checkTreatment();
    }

    private void ShowFrame(JInternalFrame frame) {
        if(frame != null) {
            frame.dispose();
            frame = null;
        }

        if(frame == null){
            if(frame instanceof GeneralInfoFrame)   frame = new GeneralInfoFrame();
            else if(frame instanceof SoilAnalysisFrame)   frame = new SoilAnalysisFrame();
            else if(frame instanceof EnvironmentalFrame)   frame = new EnvironmentalFrame();
            else if(frame instanceof CultivarsFrame)   frame = new CultivarsFrame();
            else if(frame instanceof PlantingFrame)   frame = new PlantingFrame();

            setRootPaneCheckingEnabled(false);
            javax.swing.plaf.InternalFrameUI ui = frame.getUI();
            ((javax.swing.plaf.basic.BasicInternalFrameUI)ui).setNorthPane(null);

            desktopPane.add(frame);
            try {
                frame.setMaximum(true);
            } catch (PropertyVetoException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            frame.show();
        }
        /*else if(!frame.isSelected()){
             try {
                frame.setSelected(true);
             } catch (PropertyVetoException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
             }
         }*/
    }

    private void checkTreatment() {
        if(!FileX.GetStatus()) jMenuTreatment.setEnabled(false);
        if(FileX.general != null) {
            if(FileX.general.InstituteCode.length() == 2 && FileX.general.SiteCode.length() == 2 && FileX.general.Year.length() == 4 && FileX.general.ExperimentNumber.length() > 0) {
                if(FileX.general.FileType.equals("Experimental")) {
                    if(FileX.general.crop != null) {
                        jMenuTreatment.setEnabled(true);
                    } else {
                        jMenuTreatment.setEnabled(false);
                    }
                } else {
                    jMenuTreatment.setEnabled(true);
                }
            } else {
                jMenuTreatment.setEnabled(false);
            }
        }
    }
}


class ExtensionFileFilter extends FileFilter {
  String description;

  String extensions[];

  public ExtensionFileFilter(String description, String extension) {
    this(description, new String[] { extension });
  }

  public ExtensionFileFilter(String description, String extensions[]) {
    if (description == null) {
      this.description = extensions[0];
    } else {
      this.description = description;
    }
    this.extensions = (String[]) extensions.clone();
    toLower(this.extensions);
  }

  private void toLower(String array[]) {
    for (int i = 0, n = array.length; i < n; i++) {
      array[i] = array[i].toLowerCase();
    }
  }

  public String getDescription() {
    return description;
  }

  public boolean accept(File file) {
    if (file.isDirectory()) {
      return true;
    } else {
        String fileName = file.getName().toLowerCase();
        if(fileName.endsWith("x")) return true;
        /*
         *
         *
      String path = file.getAbsolutePath().toLowerCase();
      for (int i = 0, n = extensions.length; i < n; i++) {
        String extension = extensions[i];
        if ((path.endsWith(extension) && (path.charAt(path.length() - extension.length() - 1)) == '.')) {
          return true;
        }
      }
      */
    }
    return false;
  }
}