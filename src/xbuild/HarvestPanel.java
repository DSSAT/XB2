/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * HarvestPanel.java
 *
 * Created on Mar 13, 2010, 9:19:07 PM
 */

package xbuild;

import FileXModel.HarvestApplication;
import FileXModel.FileX;
import FileXModel.Harvest;
import DSSATModel.GrowthStageList;
import DSSATModel.HarvestComponentList;
import DSSATModel.HarvestSizeList;
import java.awt.event.WindowEvent;
import java.text.SimpleDateFormat;
import java.util.Locale;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author Jazzy
 */
public class HarvestPanel extends javax.swing.JPanel {

    /** Creates new form HarvestPanel */

    protected Harvest harvestApp;
    private int selectedRowIndex = -1;

    public HarvestPanel(Harvest harvestApp) {
        initComponents();

        this.harvestApp = harvestApp;

        LoadHarvestApp();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jXLabel1 = new org.jdesktop.swingx.JXLabel();
        jXLabel3 = new org.jdesktop.swingx.JXLabel();
        txtCrop = new javax.swing.JTextField();
        jXLabel2 = new org.jdesktop.swingx.JXLabel();
        rdDaysAfterPlanting = new javax.swing.JRadioButton();
        rdReportedDates = new javax.swing.JRadioButton();
        bnAddApp = new javax.swing.JButton();
        bnDeleteApp = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jXTable1 = new org.jdesktop.swingx.JXTable();
        txtYear = new javax.swing.JFormattedTextField();

        setPreferredSize(new java.awt.Dimension(742, 613));

        jXLabel1.setText("Year");

        jXLabel3.setText("Crop");

        jXLabel2.setText("Management");

        buttonGroup1.add(rdDaysAfterPlanting);
        rdDaysAfterPlanting.setSelected(true);
        rdDaysAfterPlanting.setText("Days After Planting");
        rdDaysAfterPlanting.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rdDaysAfterPlantingStateChanged(evt);
            }
        });

        buttonGroup1.add(rdReportedDates);
        rdReportedDates.setText("On Reported Dates");

        bnAddApp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Plus.png"))); // NOI18N
        bnAddApp.setText("Add Harvest");
        bnAddApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnAddAppActionPerformed(evt);
            }
        });

        bnDeleteApp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Minus.png"))); // NOI18N
        bnDeleteApp.setText("Delete Harvest");

        jXTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Day", "Stage", "Component", "Size Group", "<html><p align='center'>Grain Harvest<br>%</p></html>", "<html><p align='center'>Byproduct Takeoff<br>%</p></html>"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jXTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jXTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jXTable1);
        jXTable1.getColumnModel().getColumn(0).setPreferredWidth(70);
        jXTable1.getColumnModel().getColumn(1).setPreferredWidth(120);
        jXTable1.getColumnModel().getColumn(2).setPreferredWidth(120);
        jXTable1.getColumnModel().getColumn(3).setPreferredWidth(120);
        jXTable1.getColumnModel().getColumn(4).setPreferredWidth(80);
        jXTable1.getColumnModel().getColumn(5).setPreferredWidth(80);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(85, 85, 85)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jXLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jXLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtCrop, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addComponent(jXLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rdDaysAfterPlanting)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rdReportedDates)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addComponent(bnAddApp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bnDeleteApp))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 722, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCrop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jXLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jXLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(bnDeleteApp)
                        .addComponent(bnAddApp))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rdDaysAfterPlanting)
                        .addComponent(jXLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(rdReportedDates))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void bnAddAppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnAddAppActionPerformed
        HarvestApplication harvApp = selectedRowIndex < 0 ? new HarvestApplication() : harvestApp.GetApp(selectedRowIndex);
        final HarvestDialog harvestDialog = new HarvestDialog(null, true, rdDaysAfterPlanting.isSelected(), harvApp);
        harvestDialog.show();

        harvestDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                HarvestApplication harvestApp = harvestDialog.GetData();
                if(harvestApp != null){
                    DefaultTableModel model = (DefaultTableModel) jXTable1.getModel();

                    model.addRow(SetRow(harvestApp));

                    HarvestPanel.this.harvestApp.AddApp(harvestApp);
                }
                harvestDialog.SetNull();
            }
        });
    }//GEN-LAST:event_bnAddAppActionPerformed

    private void rdDaysAfterPlantingStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rdDaysAfterPlantingStateChanged
        if(rdDaysAfterPlanting.isSelected())
        {
            TableColumn col = jXTable1.getColumn(0);
            col.setHeaderValue("Day");
        }
        else
        {
            TableColumn col = jXTable1.getColumn(0);
            col.setHeaderValue("Date");
        }
        DefaultTableModel model = (DefaultTableModel)jXTable1.getModel();
        for(int i = 0;i < model.getRowCount();i++)
            model.setValueAt("", i, 0);
    }//GEN-LAST:event_rdDaysAfterPlantingStateChanged

    private void jXTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jXTable1MouseClicked
        if(evt.getClickCount() == 2)
        {
            final HarvestDialog harvestDialog = new HarvestDialog(null, true, rdDaysAfterPlanting.isSelected(), harvestApp.GetApp(jXTable1.getSelectedRow()));
            harvestDialog.show();

            harvestDialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosed(WindowEvent e) {
                    
                    HarvestApplication harApp = harvestDialog.GetData();
                    if(harApp != null){
                        DefaultTableModel model = (DefaultTableModel) jXTable1.getModel();
                        Vector vector = SetRow(harApp);
                        for(int n = 0;n < vector.size();n++)
                            model.setValueAt(vector.get(n), jXTable1.getSelectedRow(), n);
                    }
                    harvestDialog.SetNull();
                }
            });
        }
        else {
            int nRow = jXTable1.getSelectedRow();
            
            if(nRow != selectedRowIndex){
                selectedRowIndex = nRow;
            }
            else{
                selectedRowIndex = -1;
                jXTable1.clearSelection();
            }
        }
    }//GEN-LAST:event_jXTable1MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bnAddApp;
    private javax.swing.JButton bnDeleteApp;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXLabel jXLabel1;
    private org.jdesktop.swingx.JXLabel jXLabel2;
    private org.jdesktop.swingx.JXLabel jXLabel3;
    private org.jdesktop.swingx.JXTable jXTable1;
    private javax.swing.JRadioButton rdDaysAfterPlanting;
    private javax.swing.JRadioButton rdReportedDates;
    private javax.swing.JTextField txtCrop;
    private javax.swing.JFormattedTextField txtYear;
    // End of variables declaration//GEN-END:variables

    private Vector SetRow(HarvestApplication harvestApp) {

        Vector vector = new Vector();
        try
        {
            Locale l = new Locale("en", "US");
            SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy", l);
            vector.addElement(df.format(harvestApp.HDATE));

            rdDaysAfterPlanting.setSelected(false);
            rdReportedDates.setSelected(true);
        }
        catch(Exception ex)
        {
            vector.add(harvestApp.HDAY);
            rdDaysAfterPlanting.setSelected(true);
            rdReportedDates.setSelected(false);
        }

        try
        {
            vector.add(GrowthStageList.GetAt(harvestApp.HSTG, FileX.general.crop).Description);
        }
        catch(Exception ex) {
            vector.add("");
        }

        try
        {
            vector.add(HarvestComponentList.GetAt(harvestApp.HCOM).Description);
        }
        catch(Exception ex) {
            vector.add("");
        }

        try
        {
            vector.add(HarvestSizeList.GetAt(harvestApp.HSIZE).Description);
        }
        catch(Exception ex) {
            vector.add("");
        }

        try
        {
            vector.add(harvestApp.HPC);
        }
        catch(Exception ex) {
            vector.add("");
        }

        try
        {
            vector.add(harvestApp.HBPC);
        }
        catch(Exception ex) {
            vector.add("");
        }

        return vector;
    }

    private void LoadHarvestApp() {
        txtYear.setText(FileX.general.Year);
        if(FileX.general != null && FileX.general.crop != null){
            txtCrop.setText(FileX.general.crop.CropName);
        }

        DefaultTableModel model = (DefaultTableModel) jXTable1.getModel();
        harvestApp.GetAll().forEach(harvest -> {
            model.addRow(SetRow(harvest));
        });
    }
}
