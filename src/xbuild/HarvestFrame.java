package xbuild;

import DSSATModel.CropList;
import DSSATModel.GrowthStageList;
import DSSATModel.HarvestComponentList;
import DSSATModel.HarvestSizeList;
import Extensions.Variables;
import FileXModel.FileX;
import FileXModel.Harvest;
import FileXModel.HarvestApplication;
import FileXModel.IModelXBase;
import java.awt.EventQueue;
import java.awt.event.FocusListener;
import java.awt.event.WindowEvent;
import java.util.Date;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import xbuild.Components.IXInternalFrame;
import xbuild.Events.UpdateLevelEvent;

/**
 *
 * @author Jazzy
 */
public class HarvestFrame extends IXInternalFrame {

    protected Harvest harvestApp;
    private int selectedRowIndex = -1;
    private Integer level;
    
    /**
     * Creates new form HarvestFrame
     */
    public HarvestFrame(String nodeName) {
        initComponents();
        
        level = 0;
        for(IModelXBase harv : FileX.harvestList.GetAll()){
            level++;
            if(getLevel(nodeName) == level){
                this.harvestApp = (Harvest)harv;
                break;
            }
        }

        LoadHarvestApp();
        
        rdDaysAfterPlanting.addChangeListener(new javax.swing.event.ChangeListener() {
            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rdDaysAfterPlantingStateChanged(evt);
            }
        });
        
        lblLevel.setText("Level " + level.toString());
        txtDescription.Init(harvestApp, "HNAME", harvestApp.HNAME);
        
        EventQueue.invokeLater(() -> {            
            setImage(imagePanel, setup.GetDSSATPath() + "\\Tools\\XBuild\\harvest2.jpg");
            rdDaysAfterPlantingStateChanged(null);
            
            rdDaysAfterPlanting.setEnabled(!FileX.isFileOpenned);
            rdReportedDates.setEnabled(!FileX.isFileOpenned);
        });
    }
    
    /**
     *
     * @param name
     */
    @Override
    public void updatePanelName(String name){
        FocusListener[] listens = txtDescription.getListeners(FocusListener.class);
        for(FocusListener li : listens)
            txtDescription.removeFocusListener(li);
        
        level = 0;
        for (IModelXBase f : FileX.harvestList.GetAll()) {
            level++;
            if(getLevel(name) == level){                
                lblLevel.setText("Level " + level.toString());
                txtDescription.setText(getDescription(name));
                break;
            }
        }
        
        for(FocusListener li : listens)
            this.addFocusListener(li);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jXLabel2 = new org.jdesktop.swingx.JXLabel();
        rdDaysAfterPlanting = new javax.swing.JRadioButton();
        rdReportedDates = new javax.swing.JRadioButton();
        bnAddApp = new javax.swing.JButton();
        bnDeleteApp = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jXTable1 = new org.jdesktop.swingx.JXTable();
        lblLevel = new org.jdesktop.swingx.JXLabel();
        txtDescription = new xbuild.Components.XTextField();
        imagePanel = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jXLabel2.setText("Management");

        buttonGroup1.add(rdDaysAfterPlanting);
        rdDaysAfterPlanting.setSelected(true);
        rdDaysAfterPlanting.setText("Days After Planting");

        buttonGroup1.add(rdReportedDates);
        rdReportedDates.setText("On Reported Dates");

        bnAddApp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Plus.png"))); // NOI18N
        bnAddApp.setText("Add Harvest");
        bnAddApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnAddAppActionPerformed(evt);
            }
        });

        bnDeleteApp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Minus.png"))); // NOI18N
        bnDeleteApp.setText("Delete Harvest");
        bnDeleteApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bnDeleteAppActionPerformed(evt);
            }
        });

        jXTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Day", "Stage", "Component", "Size Group", "<html><p align='center'>Grain Harvest<br>%</p></html>", "<html><p align='center'>Byproduct Takeoff<br>%</p></html>"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jXTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jXTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jXTable1);

        lblLevel.setText("Level");
        lblLevel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        txtDescription.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDescriptionFocusLost(evt);
            }
        });

        imagePanel.setBackground(new java.awt.Color(153, 153, 153));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 659, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 858, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jXLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(rdDaysAfterPlanting)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rdReportedDates)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bnAddApp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bnDeleteApp)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(imagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 12, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jXLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rdReportedDates)
                        .addComponent(rdDaysAfterPlanting))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(bnDeleteApp)
                        .addComponent(bnAddApp)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(imagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 432, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bnAddAppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnAddAppActionPerformed
        HarvestApplication harvApp = null;
        if (selectedRowIndex >= 0 && selectedRowIndex < harvestApp.GetSize()) {
            HarvestApplication tmp = harvestApp.GetApp(selectedRowIndex);
            harvApp = tmp.Clone();
        } else {
            harvApp = new HarvestApplication();
        }

        final HarvestDialog harvestDialog = new HarvestDialog(null, true, rdDaysAfterPlanting.isSelected(), harvApp);
        harvestDialog.show();

        harvestDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                HarvestApplication harvestApp = harvestDialog.GetData();
                if(harvestApp != null){
                    SetHarvest(harvestApp);
                }
                harvestDialog.SetNull();
            }
        });
    }//GEN-LAST:event_bnAddAppActionPerformed

    private void bnDeleteAppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bnDeleteAppActionPerformed
        int nRow = jXTable1.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) jXTable1.getModel();
        model.removeRow(nRow);

        harvestApp.RemoveAt(nRow);
    }//GEN-LAST:event_bnDeleteAppActionPerformed

    private void jXTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jXTable1MouseClicked
        if(evt.getClickCount() == 2)
        {
            final HarvestDialog harvestDialog = new HarvestDialog(null, true, rdDaysAfterPlanting.isSelected(), harvestApp.GetApp(jXTable1.getSelectedRow()));
            harvestDialog.show();

            harvestDialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosed(WindowEvent e) {

                    HarvestApplication harApp = harvestDialog.GetData();
                    if(harApp != null){
                        DefaultTableModel model = (DefaultTableModel) jXTable1.getModel();
                        Vector vector = SetRow(harApp);
                        for(int n = 0;n < vector.size();n++)
                        model.setValueAt(vector.get(n), jXTable1.getSelectedRow(), n);
                    }
                    harvestDialog.SetNull();
                }
            });
        }
        else {
            int nRow = jXTable1.getSelectedRow();

            if(nRow != selectedRowIndex){
                selectedRowIndex = nRow;
            }
            else{
                selectedRowIndex = -1;
                jXTable1.clearSelection();
            }
        }
    }//GEN-LAST:event_jXTable1MouseClicked

    private void txtDescriptionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDescriptionFocusLost
        if(txtDescription.getText() == null ? harvestApp.HNAME != null : !txtDescription.getText().equals(harvestApp.HNAME)){
            l.myAction(new UpdateLevelEvent(this, "Harvest", "Level " + level + ": " + txtDescription.getText(), level - 1));
        }
    }//GEN-LAST:event_txtDescriptionFocusLost

    private void rdDaysAfterPlantingStateChanged(javax.swing.event.ChangeEvent evt) {                                                 
        if(rdDaysAfterPlanting.isSelected())
        {
            TableColumn col = jXTable1.getColumn(0);
            col.setHeaderValue("Days After Planting");
            if(harvestApp.GetAll() != null){
                harvestApp.GetAll().forEach(h -> {
                    h.HDATE = null;
                });
            }
            
            DefaultTableModel model = (DefaultTableModel)jXTable1.getModel();
            for (int i = 0; i < model.getRowCount(); i++) {
                Object valueAt = model.getValueAt(i, 0);
                try {
                    int val = Integer.parseInt(valueAt.toString());
                    model.setValueAt(0, i, 0);
                } catch (NumberFormatException ex) {
                    model.setValueAt(0, i, 0);
                }
            }
        }
        else
        {
            TableColumn col = jXTable1.getColumn(0);
            col.setHeaderValue("<html><p align='center'>Date<br>" + Variables.getDateFormatString() + "</p></html>");
            if(harvestApp.GetAll() != null){
                harvestApp.GetAll().forEach(harvest -> {
                    harvest.HDAY = null;
                });
            }
            
            DefaultTableModel model = (DefaultTableModel)jXTable1.getModel();
            for (int i = 0; i < model.getRowCount(); i++) {
                Object valueAt = model.getValueAt(i, 0);
                if(valueAt != null){
                    try {
                        long val = Date.parse(valueAt.toString());
                        if (val == 0) {
                            model.setValueAt(0, i, 0);
                        }
                    } catch (Exception ex) {
                        model.setValueAt(0, i, 0);
                    }
                }
            }
        }        
    }
    
    private void SetHarvest(HarvestApplication harvestApp){
        if (harvestApp != null) {
            DefaultTableModel model = (DefaultTableModel) jXTable1.getModel();

            while(model.getRowCount() > 0)
                model.removeRow(0);

            this.harvestApp.AddApp(harvestApp);

            for (int i = 0; i < this.harvestApp.GetSize(); i++) {
                model.addRow(SetRow(this.harvestApp.GetApp(i)));
            }            
        }
    }
    
    private Vector SetRow(HarvestApplication harvestApp) {

        Vector vector = new Vector();
        try
        {
            vector.addElement(Variables.getDateFormat().format(harvestApp.HDATE));

            rdDaysAfterPlanting.setSelected(false);
            rdReportedDates.setSelected(true);
        }
        catch(Exception ex)
        {
            vector.add(harvestApp.HDAY);
            rdDaysAfterPlanting.setSelected(true);
            rdReportedDates.setSelected(false);
        }

        try
        {
            if(FileX.general.crop != null){
                vector.add(GrowthStageList.GetAt(harvestApp.HSTG, FileX.general.crop).Description);
            }
            else{
                vector.add(GrowthStageList.GetAt(harvestApp.HSTG, CropList.GetAtName(this.harvestApp.HNAME)).Description);
            }
        }
        catch(Exception ex) {
            vector.add("");
        }

        try
        {
            vector.add(HarvestComponentList.GetAt(harvestApp.HCOM).Description);
        }
        catch(Exception ex) {
            vector.add("");
        }

        try
        {
            vector.add(HarvestSizeList.GetAt(harvestApp.HSIZE).Description);
        }
        catch(Exception ex) {
            vector.add("");
        }

        try
        {
            vector.add(harvestApp.HPC);
        }
        catch(Exception ex) {
            vector.add("");
        }

        try
        {
            vector.add(harvestApp.HBPC);
        }
        catch(Exception ex) {
            vector.add("");
        }

        return vector;
    }

    private void LoadHarvestApp() {
        DefaultTableModel model = (DefaultTableModel) jXTable1.getModel();
        
        for(int i = 0;i< harvestApp.GetSize();i++){
            model.addRow(SetRow(harvestApp.GetApp(i)));
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bnAddApp;
    private javax.swing.JButton bnDeleteApp;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel imagePanel;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXLabel jXLabel2;
    private org.jdesktop.swingx.JXTable jXTable1;
    private org.jdesktop.swingx.JXLabel lblLevel;
    private javax.swing.JRadioButton rdDaysAfterPlanting;
    private javax.swing.JRadioButton rdReportedDates;
    private xbuild.Components.XTextField txtDescription;
    // End of variables declaration//GEN-END:variables
}
